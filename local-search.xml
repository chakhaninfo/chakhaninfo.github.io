<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AWS EC2에서 TeslaMate 시작하기</title>
    <link href="/tesla/teslamateAwsEc2/"/>
    <url>/tesla/teslamateAwsEc2/</url>
    
    <content type="html"><![CDATA[<h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>TeslaMate는 테슬라 차량의 데이터를 수집하고 시각화하는 데 사용되는 오픈 소스 솔루션입니다. 이 블로그 포스트에서는 AWS(Amazon Web Services)에서 TeslaMate를 설치하는 단계를 상세히 안내합니다. 아직 AWS에 익숙하지 않은 분들도 함께 따라와서 간단한 몇 가지 단계로 TeslaMate를 구축해보세요.</p><h2 id="필요-사항"><a href="#필요-사항" class="headerlink" title="필요 사항"></a>필요 사항</h2><p>AWS 계정: AWS 계정이 없다면 <a href="https://aws.amazon.com/ko/">여기</a>에서 계정을 생성하세요.<br>Tesla 계정: 테슬라 차량을 가지고 있어야 하며, 테슬라 계정에 로그인해야 합니다.<br>Tesla token: 테슬라 계정의 token을 생성하기 위해 <a href="https://apps.apple.com/kr/app/auth-app-for-tesla/id1552058613">Auth app for Tesla(apple)</a> &#x2F; <a href="https://play.google.com/store/apps/details?id=net.leveugle.teslatokens&pcampaignid=web_share">Tesla Tokens<br>(google)</a>앱을 설치해야 합니다.<br>기본 지식: AWS EC2 인스턴스를 생성하고 기본적인 커맨드 라인 명령을 사용하는 데에 기본 지식이 필요합니다.</p><h2 id="AWS-인스턴스-선택"><a href="#AWS-인스턴스-선택" class="headerlink" title="AWS 인스턴스 선택"></a>AWS 인스턴스 선택</h2><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-1.png"><br>서울 인스턴스 중 <code>t4g.micro</code>인스턴스가 시간당 <code>$0.0104</code>로 가장 저렴합니다. 1달에 <code>$7.49</code> 정도의 비용이 듭니다. 원화로 <code>10,000원</code> 전후가 될 것 같아요. 인스턴스 가격은 <a href="https://aws.amazon.com/ko/ec2/pricing/on-demand/">여기</a>에서 확인할 수 있습니다.</p><h2 id="인스턴스-시작"><a href="#인스턴스-시작" class="headerlink" title="인스턴스 시작"></a>인스턴스 시작</h2><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-2.png"></p><ol><li><code>인스턴스 시작</code>을 클릭합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-8.png"></p><ol start="2"><li>이름 및 태그에서 인스턴스 이름을 <code>teslamate</code>로 설정합니다. 태그는 필수는 아니지만 나중에 인스턴스를 찾기 쉽도록 설정합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-3.png"></p><ol start="3"><li>Amazon Machine Image(AMI) 선택 단계에서 원하는 운영체제를 <code>Ubuntu</code>로 선택하고 버전은 <code>Ubuntu Server 20.04 LTS (HVM), SSD Volume Type</code>로 선택합니다. 아키텍처는 <code>64비트(Arm)</code>으로 선택하고 인스턴스 유형은 <code>t4g.micro</code>로 선택합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-4.png"></p><ol start="4"><li>키패어(로그인)에서 <code>키페어 생성</code>을 클릭합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-5.png"></p><ol start="5"><li>키패어 생성 탭에서 키페어 이름을 <code>teslamate</code>로 생성합니다. 키페어 이름은 다른것으로 해도 되고 기존에 사용하던 키패어를 사용해도 됩니다. 키 패어 생성을 클릭하면 <code>teslamate.pem</code> 파일이 다운로드 됩니다. 이 파일은 나중에 SSH로 접속할 때 사용됩니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-6.png"></p><ol start="6"><li>원하는 스토리지 크기를 설정합니다. (추천: 최소 30GB)</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-7.png"></p><ol start="7"><li><code>인스턴스 시작</code>을 클릭하면 인스턴스가 생성 됩니다.</li></ol><h2 id="인스턴스-포트-설정"><a href="#인스턴스-포트-설정" class="headerlink" title="인스턴스 포트 설정"></a>인스턴스 포트 설정</h2><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-9.png"></p><ol><li>인스턴스의 디테일 페이지로 이동합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-11.png"></p><ol start="2"><li>디테일 페이지 아래쪽 보안탭에서 보안그룹 디테일페이지로 이동합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-12.png"></p><ol start="3"><li>보안그룹 디테일 페이지 아래의 <code>인바운드 규칙 편집</code>을 클릭합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-13.png"></p><ol start="4"><li>인바운드 규칙에서 <code>규칙 추가</code>를 두 번 클릭합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-14.png"></p><ol start="5"><li>포트 범위는 각각 3000, 4000으로 설정하고 소스는 Anywhere-IPv4로 설정합니다. 그리고 <code>규칙 저장</code>을 클릭합니다.</li></ol><h2 id="인스턴스-접속"><a href="#인스턴스-접속" class="headerlink" title="인스턴스 접속"></a>인스턴스 접속</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 400 teslamate.pem<br></code></pre></td></tr></table></figure><ol><li>키패어 생성에서 다운로드 받은 <code>teslamate.pem</code> 파일의 권한을 변경합니다. 해당 파일의 위치로 이동하여 위 명령어를 실행합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-9.png"></p><ol start="2"><li>인스턴스 디테일 페이지로 이동합니다.</li></ol><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-10.png"></p><ol start="3"><li>복사 아이콘을 클릭하여 해당 인스턴스의 ipv4 퍼블릭 IP를 복사합니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -i <span class="hljs-string">&quot;teslamate.pem&quot;</span> ubuntu@&lt;퍼블릭 IP&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>위 명령어를 실행하여 인스턴스에 접속합니다. 퍼블릭 IP는 위에서 복사한 퍼블릭 IP로 대체합니다. <code>yes</code>를 입력하고 엔터를 누르면 접속이 됩니다.</li></ol><h2 id="Docker-설치"><a href="#Docker-설치" class="headerlink" title="Docker 설치"></a>Docker 설치</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; install_docker.sh &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Check if the script is running with root privileges</span><br><span class="hljs-string">if [ &quot;\$EUID&quot; -ne 0 ]; then</span><br><span class="hljs-string">  echo &quot;Please run this script with sudo or as root.&quot;</span><br><span class="hljs-string">  exit 1</span><br><span class="hljs-string">fi</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Update package lists</span><br><span class="hljs-string">sudo apt-get update</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Install required dependencies</span><br><span class="hljs-string">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Add Docker&#x27;s official GPG key</span><br><span class="hljs-string">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Add Docker repository for ARM64 (aarch64)</span><br><span class="hljs-string">echo &quot;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Update package lists (again) with the new repository</span><br><span class="hljs-string">sudo apt-get update</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Install Docker</span><br><span class="hljs-string">sudo apt-get install -y docker-ce</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Add the current user to the &#x27;docker&#x27; group to run Docker without sudo</span><br><span class="hljs-string">sudo usermod -aG docker \$USER</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Enable and start the Docker service</span><br><span class="hljs-string">sudo systemctl enable docker</span><br><span class="hljs-string">sudo systemctl start docker</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Output Docker version</span><br><span class="hljs-string">docker --version</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Done!</span><br><span class="hljs-string">echo &quot;Docker has been successfully installed and started.&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol><li>위 코드를 그대로 복사하여 터미널에 붙여넣기 하면 <code>install_docker.sh</code> 파일이 생성됩니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo bash install_docker.sh<br></code></pre></td></tr></table></figure><ol start="2"><li><code>install_docker.sh</code> 파일을 실행하여 도커를 설치합니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chmod</span> 777 /var/run/docker.sock<br></code></pre></td></tr></table></figure><ol start="3"><li>위 명령어를 실행하여 도커 대한 관리자 권한을 부여합니다.</li></ol><h2 id="Docker-Compose-설치"><a href="#Docker-Compose-설치" class="headerlink" title="Docker Compose 설치"></a>Docker Compose 설치</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; install_docker_compose_arm.sh &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string"></span><br><span class="hljs-string">echo &#x27;move /usr/bin&#x27;</span><br><span class="hljs-string">cd /usr/bin</span><br><span class="hljs-string"></span><br><span class="hljs-string">echo &#x27;install docker-compose&#x27;</span><br><span class="hljs-string">wget https://github.com/linuxserver/docker-docker-compose/releases/download/1.29.2-ls51/docker-compose-arm64</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Rename to docker-compose</span><br><span class="hljs-string">echo &#x27;rename docker-compose-arm64 to docker-compose&#x27;</span><br><span class="hljs-string">mv docker-compose-arm64 docker-compose</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Grant execute permission</span><br><span class="hljs-string">echo &#x27;grant execute permission&#x27;</span><br><span class="hljs-string">chmod +x docker-compose</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Set symbolic link</span><br><span class="hljs-string"># If /usr/bin/docker-compose is deleted, the symbolic link will be automatically deleted as well</span><br><span class="hljs-string">echo &#x27;set symbolic link&#x27;</span><br><span class="hljs-string">ln -s /usr/bin/docker-compose /usr/local/bin</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Check installation</span><br><span class="hljs-string">echo &#x27;check docker-compose version&#x27;</span><br><span class="hljs-string">docker-compose --version</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol><li>위 코드를 그대로 복사하여 터미널에 붙여넣기 하면 <code>install_docker_compose_arm.sh</code> 파일이 생성됩니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo bash install_docker_compose_arm.sh<br></code></pre></td></tr></table></figure><ol start="2"><li><code>install_docker_compose_arm.sh</code> 파일을 실행하여 도커 컴포즈를 설치합니다.</li></ol><h2 id="TeslaMate-설치"><a href="#TeslaMate-설치" class="headerlink" title="TeslaMate 설치"></a>TeslaMate 설치</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> teslamate<br></code></pre></td></tr></table></figure><ol><li><code>teslamate</code> 폴더를 생성합니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> teslamate<br></code></pre></td></tr></table></figure><ol start="2"><li><code>teslamate</code> 폴더로 이동합니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; docker-compose.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">version: &quot;3&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">services:</span><br><span class="hljs-string">  teslamate:</span><br><span class="hljs-string">    image: teslamate/teslamate:latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - ENCRYPTION_KEY=tTes@#mastejdksa</span><br><span class="hljs-string">      - DATABASE_USER=teslamate</span><br><span class="hljs-string">      - DATABASE_PASS=secret</span><br><span class="hljs-string">      - DATABASE_NAME=teslamate</span><br><span class="hljs-string">      - DATABASE_HOST=database</span><br><span class="hljs-string">      - MQTT_HOST=mosquitto</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 4000:4000</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - ./import:/opt/app/import</span><br><span class="hljs-string">    depends_on:</span><br><span class="hljs-string">      - database</span><br><span class="hljs-string">    cap_drop:</span><br><span class="hljs-string">      - all</span><br><span class="hljs-string"></span><br><span class="hljs-string">  database:</span><br><span class="hljs-string">    image: postgres:15</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - POSTGRES_USER=teslamate</span><br><span class="hljs-string">      - POSTGRES_PASSWORD=secret</span><br><span class="hljs-string">      - POSTGRES_DB=teslamate</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 5432:5432</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - teslamate-db:/var/lib/postgresql/data</span><br><span class="hljs-string"></span><br><span class="hljs-string">  grafana:</span><br><span class="hljs-string">    image: teslamate/grafana:latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - DATABASE_USER=teslamate</span><br><span class="hljs-string">      - DATABASE_PASS=secret</span><br><span class="hljs-string">      - DATABASE_NAME=teslamate</span><br><span class="hljs-string">      - DATABASE_HOST=database</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 3000:3000</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - teslamate-grafana-data:/var/lib/grafana</span><br><span class="hljs-string"></span><br><span class="hljs-string">  mosquitto:</span><br><span class="hljs-string">    image: eclipse-mosquitto:1.6</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 1883:1883</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - mosquitto-conf:/mosquitto/config</span><br><span class="hljs-string">      - mosquitto-data:/mosquitto/data</span><br><span class="hljs-string"></span><br><span class="hljs-string">volumes:</span><br><span class="hljs-string">  teslamate-db:</span><br><span class="hljs-string">  teslamate-grafana-data:</span><br><span class="hljs-string">  mosquitto-conf:</span><br><span class="hljs-string">  mosquitto-data:</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol start="3"><li>위 코드를 그대로 복사하여 터미널에 붙여넣기 하면 <code>teslamate</code>폴더 안에 <code>docker-compose.yml</code> 파일이 생성됩니다.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up -d<br></code></pre></td></tr></table></figure><ol start="4"><li><code>docker-compose.yml</code> 파일을 실행하여 TeslaMate를 설치 후 실행합니다.</li></ol><h2 id="Teslamate-설정"><a href="#Teslamate-설정" class="headerlink" title="Teslamate 설정"></a>Teslamate 설정</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>&lt;퍼블릭 IP&gt;:<span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>위 주소를 통해 TeslaMate에 접속합니다.</p><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-17.png"></p><p>위와 같은 화면이 나오면 정상적으로 설치가 완료된 것입니다. teslamate에서는 Tesla API의 <code>access token</code>과 <code>refresh token</code>이 필요합니다.</p><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-18.png"></p><p>아이폰의 경우 <code>Auth for Tesla</code>앱에서 <code>access token</code>과 <code>refresh token</code>을 확인할 수 있습니다. 두 개의 토큰을 복사하여 위 화면에 붙여넣기 합니다. (안드로이드의 경우 <code>Tesla Tokens</code>앱을 사용합니다.)</p><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-19.png"><br>토큰을 입력하면 위와같이 차량 리스트들이 나옵니다. 차량이 온라인 상태면 바로 지도에 위치가 나오는데 차량이 슬립상태이면 절전상태 표시만 뜨게됩니다.</p><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-15.png"></p><p>위 화면에서 <code>admin</code> &#x2F; <code>admin</code>으로 로그인합니다.</p><p><img src="/images/teslamateAwsEc2/teslamateAwsEc2-16.png"></p><p>위 화면이 시작되는데 새로운 비밀번호를 설정합니다.</p><p>추후 차량을 움직이거나 충전하게 되면 데이터가 수집되고 시각화됩니다.</p><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><p>teslamate의 서버는 최소 1gb램을 필요로 합니다. t4g.nano 인스턴스는 0.5gb램이기 때문에 t4g.nano 인스턴스에서는 teslamate를 실행할 수 없습니다. 낮은 램을 사용하게되면 설치는 되지만 도커 중 teslamate가 무한 재부팅 됩니다. 4000번 포트로 접속 시 <code>502 Bad Gateway</code> 에러가 발생하면 램이 부족한 것이니 인스턴스를 변경하거나 램을 늘려야 합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><h2 id="이제-AWS-인스턴스에서-TeslaMate를-성공적으로-설치하였습니다-Tesla-차량의-데이터를-수집하고-시각화하여-차량-성능-및-사용-정보를-쉽게-파악할-수-있습니다-추가적인-설정-및-기능-확장을-위해서는-TeslaMate-문서를-참조하세요"><a href="#이제-AWS-인스턴스에서-TeslaMate를-성공적으로-설치하였습니다-Tesla-차량의-데이터를-수집하고-시각화하여-차량-성능-및-사용-정보를-쉽게-파악할-수-있습니다-추가적인-설정-및-기능-확장을-위해서는-TeslaMate-문서를-참조하세요" class="headerlink" title="이제 AWS 인스턴스에서 TeslaMate를 성공적으로 설치하였습니다. Tesla 차량의 데이터를 수집하고 시각화하여 차량 성능 및 사용 정보를 쉽게 파악할 수 있습니다. 추가적인 설정 및 기능 확장을 위해서는 TeslaMate 문서를 참조하세요."></a>이제 AWS 인스턴스에서 TeslaMate를 성공적으로 설치하였습니다. Tesla 차량의 데이터를 수집하고 시각화하여 차량 성능 및 사용 정보를 쉽게 파악할 수 있습니다. 추가적인 설정 및 기능 확장을 위해서는 TeslaMate 문서를 참조하세요.</h2><p>레퍼럴코드: <a href="https://www.tesla.com/ko_kr/referral/jungwon51749">https://www.tesla.com/ko_kr&#x2F;referral&#x2F;jungwon51749</a></p>]]></content>
    
    
    <categories>
      
      <category>Tesla</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tesla</tag>
      
      <tag>teslamate</tag>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
      <tag>aws</tag>
      
      <tag>ec2</tag>
      
      <tag>arm</tag>
      
      <tag>t4g.micro</tag>
      
      <tag>레퍼럴코드</tag>
      
      <tag>referral</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
